//! Implements RegisterBlock for tuples of registers

use crate::register::{Register, RegisterBlock};

impl<R> RegisterBlock for R
where
    R: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        if index == 0 {
            Some(self)
        } else {
            None
        }
    }

    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.name() {
            Some(self)
        } else {
            None
        }
    }
}

// Below code generated by generate_bloc_impl.rb
impl<R0, R1> RegisterBlock for (R0, R1)
where
    R0: Register,
    R1: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else {
            None
        }
    }
}
impl<R0, R1, R2> RegisterBlock for (R0, R1, R2)
where
    R0: Register,
    R1: Register,
    R2: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else {
            None
        }
    }
}
impl<R0, R1, R2, R3> RegisterBlock for (R0, R1, R2, R3)
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else {
            None
        }
    }
}
impl<R0, R1, R2, R3, R4> RegisterBlock for (R0, R1, R2, R3, R4)
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else {
            None
        }
    }
}
impl<R0, R1, R2, R3, R4, R5> RegisterBlock for (R0, R1, R2, R3, R4, R5)
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else {
            None
        }
    }
}
impl<R0, R1, R2, R3, R4, R5, R6> RegisterBlock for (R0, R1, R2, R3, R4, R5, R6)
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else {
            None
        }
    }
}
impl<R0, R1, R2, R3, R4, R5, R6, R7> RegisterBlock for (R0, R1, R2, R3, R4, R5, R6, R7)
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else {
            None
        }
    }
}
impl<R0, R1, R2, R3, R4, R5, R6, R7, R8> RegisterBlock for (R0, R1, R2, R3, R4, R5, R6, R7, R8)
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else {
            None
        }
    }
}
impl<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9> RegisterBlock
    for (R0, R1, R2, R3, R4, R5, R6, R7, R8, R9)
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else {
            None
        }
    }
}
impl<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10> RegisterBlock
    for (R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10)
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else {
            None
        }
    }
}
impl<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11> RegisterBlock
    for (R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11)
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
    R11: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            11 => Some(&self.11),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else if name == self.11.name() {
            Some(&mut self.11)
        } else {
            None
        }
    }
}
impl<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12> RegisterBlock
    for (R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12)
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
    R11: Register,
    R12: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            11 => Some(&self.11),
            12 => Some(&self.12),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else if name == self.11.name() {
            Some(&mut self.11)
        } else if name == self.12.name() {
            Some(&mut self.12)
        } else {
            None
        }
    }
}
impl<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13> RegisterBlock
    for (R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13)
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
    R11: Register,
    R12: Register,
    R13: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            11 => Some(&self.11),
            12 => Some(&self.12),
            13 => Some(&self.13),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else if name == self.11.name() {
            Some(&mut self.11)
        } else if name == self.12.name() {
            Some(&mut self.12)
        } else if name == self.13.name() {
            Some(&mut self.13)
        } else {
            None
        }
    }
}
impl<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14> RegisterBlock
    for (
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
    )
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
    R11: Register,
    R12: Register,
    R13: Register,
    R14: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            11 => Some(&self.11),
            12 => Some(&self.12),
            13 => Some(&self.13),
            14 => Some(&self.14),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else if name == self.11.name() {
            Some(&mut self.11)
        } else if name == self.12.name() {
            Some(&mut self.12)
        } else if name == self.13.name() {
            Some(&mut self.13)
        } else if name == self.14.name() {
            Some(&mut self.14)
        } else {
            None
        }
    }
}
impl<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15> RegisterBlock
    for (
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
    )
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
    R11: Register,
    R12: Register,
    R13: Register,
    R14: Register,
    R15: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            11 => Some(&self.11),
            12 => Some(&self.12),
            13 => Some(&self.13),
            14 => Some(&self.14),
            15 => Some(&self.15),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else if name == self.11.name() {
            Some(&mut self.11)
        } else if name == self.12.name() {
            Some(&mut self.12)
        } else if name == self.13.name() {
            Some(&mut self.13)
        } else if name == self.14.name() {
            Some(&mut self.14)
        } else if name == self.15.name() {
            Some(&mut self.15)
        } else {
            None
        }
    }
}
impl<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16> RegisterBlock
    for (
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
    )
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
    R11: Register,
    R12: Register,
    R13: Register,
    R14: Register,
    R15: Register,
    R16: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            11 => Some(&self.11),
            12 => Some(&self.12),
            13 => Some(&self.13),
            14 => Some(&self.14),
            15 => Some(&self.15),
            16 => Some(&self.16),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else if name == self.11.name() {
            Some(&mut self.11)
        } else if name == self.12.name() {
            Some(&mut self.12)
        } else if name == self.13.name() {
            Some(&mut self.13)
        } else if name == self.14.name() {
            Some(&mut self.14)
        } else if name == self.15.name() {
            Some(&mut self.15)
        } else if name == self.16.name() {
            Some(&mut self.16)
        } else {
            None
        }
    }
}
impl<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17> RegisterBlock
    for (
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
    )
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
    R11: Register,
    R12: Register,
    R13: Register,
    R14: Register,
    R15: Register,
    R16: Register,
    R17: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            11 => Some(&self.11),
            12 => Some(&self.12),
            13 => Some(&self.13),
            14 => Some(&self.14),
            15 => Some(&self.15),
            16 => Some(&self.16),
            17 => Some(&self.17),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else if name == self.11.name() {
            Some(&mut self.11)
        } else if name == self.12.name() {
            Some(&mut self.12)
        } else if name == self.13.name() {
            Some(&mut self.13)
        } else if name == self.14.name() {
            Some(&mut self.14)
        } else if name == self.15.name() {
            Some(&mut self.15)
        } else if name == self.16.name() {
            Some(&mut self.16)
        } else if name == self.17.name() {
            Some(&mut self.17)
        } else {
            None
        }
    }
}
impl<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18>
    RegisterBlock
    for (
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
    )
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
    R11: Register,
    R12: Register,
    R13: Register,
    R14: Register,
    R15: Register,
    R16: Register,
    R17: Register,
    R18: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            11 => Some(&self.11),
            12 => Some(&self.12),
            13 => Some(&self.13),
            14 => Some(&self.14),
            15 => Some(&self.15),
            16 => Some(&self.16),
            17 => Some(&self.17),
            18 => Some(&self.18),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else if name == self.11.name() {
            Some(&mut self.11)
        } else if name == self.12.name() {
            Some(&mut self.12)
        } else if name == self.13.name() {
            Some(&mut self.13)
        } else if name == self.14.name() {
            Some(&mut self.14)
        } else if name == self.15.name() {
            Some(&mut self.15)
        } else if name == self.16.name() {
            Some(&mut self.16)
        } else if name == self.17.name() {
            Some(&mut self.17)
        } else if name == self.18.name() {
            Some(&mut self.18)
        } else {
            None
        }
    }
}
impl<R0, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, R11, R12, R13, R14, R15, R16, R17, R18, R19>
    RegisterBlock
    for (
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
    )
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
    R11: Register,
    R12: Register,
    R13: Register,
    R14: Register,
    R15: Register,
    R16: Register,
    R17: Register,
    R18: Register,
    R19: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            11 => Some(&self.11),
            12 => Some(&self.12),
            13 => Some(&self.13),
            14 => Some(&self.14),
            15 => Some(&self.15),
            16 => Some(&self.16),
            17 => Some(&self.17),
            18 => Some(&self.18),
            19 => Some(&self.19),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else if name == self.11.name() {
            Some(&mut self.11)
        } else if name == self.12.name() {
            Some(&mut self.12)
        } else if name == self.13.name() {
            Some(&mut self.13)
        } else if name == self.14.name() {
            Some(&mut self.14)
        } else if name == self.15.name() {
            Some(&mut self.15)
        } else if name == self.16.name() {
            Some(&mut self.16)
        } else if name == self.17.name() {
            Some(&mut self.17)
        } else if name == self.18.name() {
            Some(&mut self.18)
        } else if name == self.19.name() {
            Some(&mut self.19)
        } else {
            None
        }
    }
}
impl<
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
    > RegisterBlock
    for (
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
    )
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
    R11: Register,
    R12: Register,
    R13: Register,
    R14: Register,
    R15: Register,
    R16: Register,
    R17: Register,
    R18: Register,
    R19: Register,
    R20: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            11 => Some(&self.11),
            12 => Some(&self.12),
            13 => Some(&self.13),
            14 => Some(&self.14),
            15 => Some(&self.15),
            16 => Some(&self.16),
            17 => Some(&self.17),
            18 => Some(&self.18),
            19 => Some(&self.19),
            20 => Some(&self.20),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else if name == self.11.name() {
            Some(&mut self.11)
        } else if name == self.12.name() {
            Some(&mut self.12)
        } else if name == self.13.name() {
            Some(&mut self.13)
        } else if name == self.14.name() {
            Some(&mut self.14)
        } else if name == self.15.name() {
            Some(&mut self.15)
        } else if name == self.16.name() {
            Some(&mut self.16)
        } else if name == self.17.name() {
            Some(&mut self.17)
        } else if name == self.18.name() {
            Some(&mut self.18)
        } else if name == self.19.name() {
            Some(&mut self.19)
        } else if name == self.20.name() {
            Some(&mut self.20)
        } else {
            None
        }
    }
}
impl<
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
    > RegisterBlock
    for (
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
    )
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
    R11: Register,
    R12: Register,
    R13: Register,
    R14: Register,
    R15: Register,
    R16: Register,
    R17: Register,
    R18: Register,
    R19: Register,
    R20: Register,
    R21: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            11 => Some(&self.11),
            12 => Some(&self.12),
            13 => Some(&self.13),
            14 => Some(&self.14),
            15 => Some(&self.15),
            16 => Some(&self.16),
            17 => Some(&self.17),
            18 => Some(&self.18),
            19 => Some(&self.19),
            20 => Some(&self.20),
            21 => Some(&self.21),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else if name == self.11.name() {
            Some(&mut self.11)
        } else if name == self.12.name() {
            Some(&mut self.12)
        } else if name == self.13.name() {
            Some(&mut self.13)
        } else if name == self.14.name() {
            Some(&mut self.14)
        } else if name == self.15.name() {
            Some(&mut self.15)
        } else if name == self.16.name() {
            Some(&mut self.16)
        } else if name == self.17.name() {
            Some(&mut self.17)
        } else if name == self.18.name() {
            Some(&mut self.18)
        } else if name == self.19.name() {
            Some(&mut self.19)
        } else if name == self.20.name() {
            Some(&mut self.20)
        } else if name == self.21.name() {
            Some(&mut self.21)
        } else {
            None
        }
    }
}
impl<
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
        R22,
    > RegisterBlock
    for (
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
        R22,
    )
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
    R11: Register,
    R12: Register,
    R13: Register,
    R14: Register,
    R15: Register,
    R16: Register,
    R17: Register,
    R18: Register,
    R19: Register,
    R20: Register,
    R21: Register,
    R22: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            11 => Some(&self.11),
            12 => Some(&self.12),
            13 => Some(&self.13),
            14 => Some(&self.14),
            15 => Some(&self.15),
            16 => Some(&self.16),
            17 => Some(&self.17),
            18 => Some(&self.18),
            19 => Some(&self.19),
            20 => Some(&self.20),
            21 => Some(&self.21),
            22 => Some(&self.22),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else if name == self.11.name() {
            Some(&mut self.11)
        } else if name == self.12.name() {
            Some(&mut self.12)
        } else if name == self.13.name() {
            Some(&mut self.13)
        } else if name == self.14.name() {
            Some(&mut self.14)
        } else if name == self.15.name() {
            Some(&mut self.15)
        } else if name == self.16.name() {
            Some(&mut self.16)
        } else if name == self.17.name() {
            Some(&mut self.17)
        } else if name == self.18.name() {
            Some(&mut self.18)
        } else if name == self.19.name() {
            Some(&mut self.19)
        } else if name == self.20.name() {
            Some(&mut self.20)
        } else if name == self.21.name() {
            Some(&mut self.21)
        } else if name == self.22.name() {
            Some(&mut self.22)
        } else {
            None
        }
    }
}
impl<
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
        R22,
        R23,
    > RegisterBlock
    for (
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
        R22,
        R23,
    )
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
    R11: Register,
    R12: Register,
    R13: Register,
    R14: Register,
    R15: Register,
    R16: Register,
    R17: Register,
    R18: Register,
    R19: Register,
    R20: Register,
    R21: Register,
    R22: Register,
    R23: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            11 => Some(&self.11),
            12 => Some(&self.12),
            13 => Some(&self.13),
            14 => Some(&self.14),
            15 => Some(&self.15),
            16 => Some(&self.16),
            17 => Some(&self.17),
            18 => Some(&self.18),
            19 => Some(&self.19),
            20 => Some(&self.20),
            21 => Some(&self.21),
            22 => Some(&self.22),
            23 => Some(&self.23),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else if name == self.11.name() {
            Some(&mut self.11)
        } else if name == self.12.name() {
            Some(&mut self.12)
        } else if name == self.13.name() {
            Some(&mut self.13)
        } else if name == self.14.name() {
            Some(&mut self.14)
        } else if name == self.15.name() {
            Some(&mut self.15)
        } else if name == self.16.name() {
            Some(&mut self.16)
        } else if name == self.17.name() {
            Some(&mut self.17)
        } else if name == self.18.name() {
            Some(&mut self.18)
        } else if name == self.19.name() {
            Some(&mut self.19)
        } else if name == self.20.name() {
            Some(&mut self.20)
        } else if name == self.21.name() {
            Some(&mut self.21)
        } else if name == self.22.name() {
            Some(&mut self.22)
        } else if name == self.23.name() {
            Some(&mut self.23)
        } else {
            None
        }
    }
}
impl<
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
        R22,
        R23,
        R24,
    > RegisterBlock
    for (
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
        R22,
        R23,
        R24,
    )
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
    R11: Register,
    R12: Register,
    R13: Register,
    R14: Register,
    R15: Register,
    R16: Register,
    R17: Register,
    R18: Register,
    R19: Register,
    R20: Register,
    R21: Register,
    R22: Register,
    R23: Register,
    R24: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            11 => Some(&self.11),
            12 => Some(&self.12),
            13 => Some(&self.13),
            14 => Some(&self.14),
            15 => Some(&self.15),
            16 => Some(&self.16),
            17 => Some(&self.17),
            18 => Some(&self.18),
            19 => Some(&self.19),
            20 => Some(&self.20),
            21 => Some(&self.21),
            22 => Some(&self.22),
            23 => Some(&self.23),
            24 => Some(&self.24),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else if name == self.11.name() {
            Some(&mut self.11)
        } else if name == self.12.name() {
            Some(&mut self.12)
        } else if name == self.13.name() {
            Some(&mut self.13)
        } else if name == self.14.name() {
            Some(&mut self.14)
        } else if name == self.15.name() {
            Some(&mut self.15)
        } else if name == self.16.name() {
            Some(&mut self.16)
        } else if name == self.17.name() {
            Some(&mut self.17)
        } else if name == self.18.name() {
            Some(&mut self.18)
        } else if name == self.19.name() {
            Some(&mut self.19)
        } else if name == self.20.name() {
            Some(&mut self.20)
        } else if name == self.21.name() {
            Some(&mut self.21)
        } else if name == self.22.name() {
            Some(&mut self.22)
        } else if name == self.23.name() {
            Some(&mut self.23)
        } else if name == self.24.name() {
            Some(&mut self.24)
        } else {
            None
        }
    }
}
impl<
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
        R22,
        R23,
        R24,
        R25,
    > RegisterBlock
    for (
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
        R22,
        R23,
        R24,
        R25,
    )
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
    R11: Register,
    R12: Register,
    R13: Register,
    R14: Register,
    R15: Register,
    R16: Register,
    R17: Register,
    R18: Register,
    R19: Register,
    R20: Register,
    R21: Register,
    R22: Register,
    R23: Register,
    R24: Register,
    R25: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            11 => Some(&self.11),
            12 => Some(&self.12),
            13 => Some(&self.13),
            14 => Some(&self.14),
            15 => Some(&self.15),
            16 => Some(&self.16),
            17 => Some(&self.17),
            18 => Some(&self.18),
            19 => Some(&self.19),
            20 => Some(&self.20),
            21 => Some(&self.21),
            22 => Some(&self.22),
            23 => Some(&self.23),
            24 => Some(&self.24),
            25 => Some(&self.25),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else if name == self.11.name() {
            Some(&mut self.11)
        } else if name == self.12.name() {
            Some(&mut self.12)
        } else if name == self.13.name() {
            Some(&mut self.13)
        } else if name == self.14.name() {
            Some(&mut self.14)
        } else if name == self.15.name() {
            Some(&mut self.15)
        } else if name == self.16.name() {
            Some(&mut self.16)
        } else if name == self.17.name() {
            Some(&mut self.17)
        } else if name == self.18.name() {
            Some(&mut self.18)
        } else if name == self.19.name() {
            Some(&mut self.19)
        } else if name == self.20.name() {
            Some(&mut self.20)
        } else if name == self.21.name() {
            Some(&mut self.21)
        } else if name == self.22.name() {
            Some(&mut self.22)
        } else if name == self.23.name() {
            Some(&mut self.23)
        } else if name == self.24.name() {
            Some(&mut self.24)
        } else if name == self.25.name() {
            Some(&mut self.25)
        } else {
            None
        }
    }
}
impl<
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
        R22,
        R23,
        R24,
        R25,
        R26,
    > RegisterBlock
    for (
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
        R22,
        R23,
        R24,
        R25,
        R26,
    )
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
    R11: Register,
    R12: Register,
    R13: Register,
    R14: Register,
    R15: Register,
    R16: Register,
    R17: Register,
    R18: Register,
    R19: Register,
    R20: Register,
    R21: Register,
    R22: Register,
    R23: Register,
    R24: Register,
    R25: Register,
    R26: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            11 => Some(&self.11),
            12 => Some(&self.12),
            13 => Some(&self.13),
            14 => Some(&self.14),
            15 => Some(&self.15),
            16 => Some(&self.16),
            17 => Some(&self.17),
            18 => Some(&self.18),
            19 => Some(&self.19),
            20 => Some(&self.20),
            21 => Some(&self.21),
            22 => Some(&self.22),
            23 => Some(&self.23),
            24 => Some(&self.24),
            25 => Some(&self.25),
            26 => Some(&self.26),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else if name == self.11.name() {
            Some(&mut self.11)
        } else if name == self.12.name() {
            Some(&mut self.12)
        } else if name == self.13.name() {
            Some(&mut self.13)
        } else if name == self.14.name() {
            Some(&mut self.14)
        } else if name == self.15.name() {
            Some(&mut self.15)
        } else if name == self.16.name() {
            Some(&mut self.16)
        } else if name == self.17.name() {
            Some(&mut self.17)
        } else if name == self.18.name() {
            Some(&mut self.18)
        } else if name == self.19.name() {
            Some(&mut self.19)
        } else if name == self.20.name() {
            Some(&mut self.20)
        } else if name == self.21.name() {
            Some(&mut self.21)
        } else if name == self.22.name() {
            Some(&mut self.22)
        } else if name == self.23.name() {
            Some(&mut self.23)
        } else if name == self.24.name() {
            Some(&mut self.24)
        } else if name == self.25.name() {
            Some(&mut self.25)
        } else if name == self.26.name() {
            Some(&mut self.26)
        } else {
            None
        }
    }
}
impl<
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
        R22,
        R23,
        R24,
        R25,
        R26,
        R27,
    > RegisterBlock
    for (
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
        R22,
        R23,
        R24,
        R25,
        R26,
        R27,
    )
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
    R11: Register,
    R12: Register,
    R13: Register,
    R14: Register,
    R15: Register,
    R16: Register,
    R17: Register,
    R18: Register,
    R19: Register,
    R20: Register,
    R21: Register,
    R22: Register,
    R23: Register,
    R24: Register,
    R25: Register,
    R26: Register,
    R27: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            11 => Some(&self.11),
            12 => Some(&self.12),
            13 => Some(&self.13),
            14 => Some(&self.14),
            15 => Some(&self.15),
            16 => Some(&self.16),
            17 => Some(&self.17),
            18 => Some(&self.18),
            19 => Some(&self.19),
            20 => Some(&self.20),
            21 => Some(&self.21),
            22 => Some(&self.22),
            23 => Some(&self.23),
            24 => Some(&self.24),
            25 => Some(&self.25),
            26 => Some(&self.26),
            27 => Some(&self.27),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else if name == self.11.name() {
            Some(&mut self.11)
        } else if name == self.12.name() {
            Some(&mut self.12)
        } else if name == self.13.name() {
            Some(&mut self.13)
        } else if name == self.14.name() {
            Some(&mut self.14)
        } else if name == self.15.name() {
            Some(&mut self.15)
        } else if name == self.16.name() {
            Some(&mut self.16)
        } else if name == self.17.name() {
            Some(&mut self.17)
        } else if name == self.18.name() {
            Some(&mut self.18)
        } else if name == self.19.name() {
            Some(&mut self.19)
        } else if name == self.20.name() {
            Some(&mut self.20)
        } else if name == self.21.name() {
            Some(&mut self.21)
        } else if name == self.22.name() {
            Some(&mut self.22)
        } else if name == self.23.name() {
            Some(&mut self.23)
        } else if name == self.24.name() {
            Some(&mut self.24)
        } else if name == self.25.name() {
            Some(&mut self.25)
        } else if name == self.26.name() {
            Some(&mut self.26)
        } else if name == self.27.name() {
            Some(&mut self.27)
        } else {
            None
        }
    }
}
impl<
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
        R22,
        R23,
        R24,
        R25,
        R26,
        R27,
        R28,
    > RegisterBlock
    for (
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
        R22,
        R23,
        R24,
        R25,
        R26,
        R27,
        R28,
    )
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
    R11: Register,
    R12: Register,
    R13: Register,
    R14: Register,
    R15: Register,
    R16: Register,
    R17: Register,
    R18: Register,
    R19: Register,
    R20: Register,
    R21: Register,
    R22: Register,
    R23: Register,
    R24: Register,
    R25: Register,
    R26: Register,
    R27: Register,
    R28: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            11 => Some(&self.11),
            12 => Some(&self.12),
            13 => Some(&self.13),
            14 => Some(&self.14),
            15 => Some(&self.15),
            16 => Some(&self.16),
            17 => Some(&self.17),
            18 => Some(&self.18),
            19 => Some(&self.19),
            20 => Some(&self.20),
            21 => Some(&self.21),
            22 => Some(&self.22),
            23 => Some(&self.23),
            24 => Some(&self.24),
            25 => Some(&self.25),
            26 => Some(&self.26),
            27 => Some(&self.27),
            28 => Some(&self.28),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else if name == self.11.name() {
            Some(&mut self.11)
        } else if name == self.12.name() {
            Some(&mut self.12)
        } else if name == self.13.name() {
            Some(&mut self.13)
        } else if name == self.14.name() {
            Some(&mut self.14)
        } else if name == self.15.name() {
            Some(&mut self.15)
        } else if name == self.16.name() {
            Some(&mut self.16)
        } else if name == self.17.name() {
            Some(&mut self.17)
        } else if name == self.18.name() {
            Some(&mut self.18)
        } else if name == self.19.name() {
            Some(&mut self.19)
        } else if name == self.20.name() {
            Some(&mut self.20)
        } else if name == self.21.name() {
            Some(&mut self.21)
        } else if name == self.22.name() {
            Some(&mut self.22)
        } else if name == self.23.name() {
            Some(&mut self.23)
        } else if name == self.24.name() {
            Some(&mut self.24)
        } else if name == self.25.name() {
            Some(&mut self.25)
        } else if name == self.26.name() {
            Some(&mut self.26)
        } else if name == self.27.name() {
            Some(&mut self.27)
        } else if name == self.28.name() {
            Some(&mut self.28)
        } else {
            None
        }
    }
}
impl<
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
        R22,
        R23,
        R24,
        R25,
        R26,
        R27,
        R28,
        R29,
    > RegisterBlock
    for (
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
        R22,
        R23,
        R24,
        R25,
        R26,
        R27,
        R28,
        R29,
    )
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
    R11: Register,
    R12: Register,
    R13: Register,
    R14: Register,
    R15: Register,
    R16: Register,
    R17: Register,
    R18: Register,
    R19: Register,
    R20: Register,
    R21: Register,
    R22: Register,
    R23: Register,
    R24: Register,
    R25: Register,
    R26: Register,
    R27: Register,
    R28: Register,
    R29: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            11 => Some(&self.11),
            12 => Some(&self.12),
            13 => Some(&self.13),
            14 => Some(&self.14),
            15 => Some(&self.15),
            16 => Some(&self.16),
            17 => Some(&self.17),
            18 => Some(&self.18),
            19 => Some(&self.19),
            20 => Some(&self.20),
            21 => Some(&self.21),
            22 => Some(&self.22),
            23 => Some(&self.23),
            24 => Some(&self.24),
            25 => Some(&self.25),
            26 => Some(&self.26),
            27 => Some(&self.27),
            28 => Some(&self.28),
            29 => Some(&self.29),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else if name == self.11.name() {
            Some(&mut self.11)
        } else if name == self.12.name() {
            Some(&mut self.12)
        } else if name == self.13.name() {
            Some(&mut self.13)
        } else if name == self.14.name() {
            Some(&mut self.14)
        } else if name == self.15.name() {
            Some(&mut self.15)
        } else if name == self.16.name() {
            Some(&mut self.16)
        } else if name == self.17.name() {
            Some(&mut self.17)
        } else if name == self.18.name() {
            Some(&mut self.18)
        } else if name == self.19.name() {
            Some(&mut self.19)
        } else if name == self.20.name() {
            Some(&mut self.20)
        } else if name == self.21.name() {
            Some(&mut self.21)
        } else if name == self.22.name() {
            Some(&mut self.22)
        } else if name == self.23.name() {
            Some(&mut self.23)
        } else if name == self.24.name() {
            Some(&mut self.24)
        } else if name == self.25.name() {
            Some(&mut self.25)
        } else if name == self.26.name() {
            Some(&mut self.26)
        } else if name == self.27.name() {
            Some(&mut self.27)
        } else if name == self.28.name() {
            Some(&mut self.28)
        } else if name == self.29.name() {
            Some(&mut self.29)
        } else {
            None
        }
    }
}
impl<
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
        R22,
        R23,
        R24,
        R25,
        R26,
        R27,
        R28,
        R29,
        R30,
    > RegisterBlock
    for (
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
        R22,
        R23,
        R24,
        R25,
        R26,
        R27,
        R28,
        R29,
        R30,
    )
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
    R11: Register,
    R12: Register,
    R13: Register,
    R14: Register,
    R15: Register,
    R16: Register,
    R17: Register,
    R18: Register,
    R19: Register,
    R20: Register,
    R21: Register,
    R22: Register,
    R23: Register,
    R24: Register,
    R25: Register,
    R26: Register,
    R27: Register,
    R28: Register,
    R29: Register,
    R30: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            11 => Some(&self.11),
            12 => Some(&self.12),
            13 => Some(&self.13),
            14 => Some(&self.14),
            15 => Some(&self.15),
            16 => Some(&self.16),
            17 => Some(&self.17),
            18 => Some(&self.18),
            19 => Some(&self.19),
            20 => Some(&self.20),
            21 => Some(&self.21),
            22 => Some(&self.22),
            23 => Some(&self.23),
            24 => Some(&self.24),
            25 => Some(&self.25),
            26 => Some(&self.26),
            27 => Some(&self.27),
            28 => Some(&self.28),
            29 => Some(&self.29),
            30 => Some(&self.30),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else if name == self.11.name() {
            Some(&mut self.11)
        } else if name == self.12.name() {
            Some(&mut self.12)
        } else if name == self.13.name() {
            Some(&mut self.13)
        } else if name == self.14.name() {
            Some(&mut self.14)
        } else if name == self.15.name() {
            Some(&mut self.15)
        } else if name == self.16.name() {
            Some(&mut self.16)
        } else if name == self.17.name() {
            Some(&mut self.17)
        } else if name == self.18.name() {
            Some(&mut self.18)
        } else if name == self.19.name() {
            Some(&mut self.19)
        } else if name == self.20.name() {
            Some(&mut self.20)
        } else if name == self.21.name() {
            Some(&mut self.21)
        } else if name == self.22.name() {
            Some(&mut self.22)
        } else if name == self.23.name() {
            Some(&mut self.23)
        } else if name == self.24.name() {
            Some(&mut self.24)
        } else if name == self.25.name() {
            Some(&mut self.25)
        } else if name == self.26.name() {
            Some(&mut self.26)
        } else if name == self.27.name() {
            Some(&mut self.27)
        } else if name == self.28.name() {
            Some(&mut self.28)
        } else if name == self.29.name() {
            Some(&mut self.29)
        } else if name == self.30.name() {
            Some(&mut self.30)
        } else {
            None
        }
    }
}
impl<
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
        R22,
        R23,
        R24,
        R25,
        R26,
        R27,
        R28,
        R29,
        R30,
        R31,
    > RegisterBlock
    for (
        R0,
        R1,
        R2,
        R3,
        R4,
        R5,
        R6,
        R7,
        R8,
        R9,
        R10,
        R11,
        R12,
        R13,
        R14,
        R15,
        R16,
        R17,
        R18,
        R19,
        R20,
        R21,
        R22,
        R23,
        R24,
        R25,
        R26,
        R27,
        R28,
        R29,
        R30,
        R31,
    )
where
    R0: Register,
    R1: Register,
    R2: Register,
    R3: Register,
    R4: Register,
    R5: Register,
    R6: Register,
    R7: Register,
    R8: Register,
    R9: Register,
    R10: Register,
    R11: Register,
    R12: Register,
    R13: Register,
    R14: Register,
    R15: Register,
    R16: Register,
    R17: Register,
    R18: Register,
    R19: Register,
    R20: Register,
    R21: Register,
    R22: Register,
    R23: Register,
    R24: Register,
    R25: Register,
    R26: Register,
    R27: Register,
    R28: Register,
    R29: Register,
    R30: Register,
    R31: Register,
{
    fn register_by_index(&self, index: usize) -> Option<&dyn Register> {
        match index {
            0 => Some(&self.0),
            1 => Some(&self.1),
            2 => Some(&self.2),
            3 => Some(&self.3),
            4 => Some(&self.4),
            5 => Some(&self.5),
            6 => Some(&self.6),
            7 => Some(&self.7),
            8 => Some(&self.8),
            9 => Some(&self.9),
            10 => Some(&self.10),
            11 => Some(&self.11),
            12 => Some(&self.12),
            13 => Some(&self.13),
            14 => Some(&self.14),
            15 => Some(&self.15),
            16 => Some(&self.16),
            17 => Some(&self.17),
            18 => Some(&self.18),
            19 => Some(&self.19),
            20 => Some(&self.20),
            21 => Some(&self.21),
            22 => Some(&self.22),
            23 => Some(&self.23),
            24 => Some(&self.24),
            25 => Some(&self.25),
            26 => Some(&self.26),
            27 => Some(&self.27),
            28 => Some(&self.28),
            29 => Some(&self.29),
            30 => Some(&self.30),
            31 => Some(&self.31),
            _ => None,
        }
    }
    fn register_by_name_mut(&mut self, name: &str) -> Option<&mut dyn Register> {
        if name == self.0.name() {
            Some(&mut self.0)
        } else if name == self.1.name() {
            Some(&mut self.1)
        } else if name == self.2.name() {
            Some(&mut self.2)
        } else if name == self.3.name() {
            Some(&mut self.3)
        } else if name == self.4.name() {
            Some(&mut self.4)
        } else if name == self.5.name() {
            Some(&mut self.5)
        } else if name == self.6.name() {
            Some(&mut self.6)
        } else if name == self.7.name() {
            Some(&mut self.7)
        } else if name == self.8.name() {
            Some(&mut self.8)
        } else if name == self.9.name() {
            Some(&mut self.9)
        } else if name == self.10.name() {
            Some(&mut self.10)
        } else if name == self.11.name() {
            Some(&mut self.11)
        } else if name == self.12.name() {
            Some(&mut self.12)
        } else if name == self.13.name() {
            Some(&mut self.13)
        } else if name == self.14.name() {
            Some(&mut self.14)
        } else if name == self.15.name() {
            Some(&mut self.15)
        } else if name == self.16.name() {
            Some(&mut self.16)
        } else if name == self.17.name() {
            Some(&mut self.17)
        } else if name == self.18.name() {
            Some(&mut self.18)
        } else if name == self.19.name() {
            Some(&mut self.19)
        } else if name == self.20.name() {
            Some(&mut self.20)
        } else if name == self.21.name() {
            Some(&mut self.21)
        } else if name == self.22.name() {
            Some(&mut self.22)
        } else if name == self.23.name() {
            Some(&mut self.23)
        } else if name == self.24.name() {
            Some(&mut self.24)
        } else if name == self.25.name() {
            Some(&mut self.25)
        } else if name == self.26.name() {
            Some(&mut self.26)
        } else if name == self.27.name() {
            Some(&mut self.27)
        } else if name == self.28.name() {
            Some(&mut self.28)
        } else if name == self.29.name() {
            Some(&mut self.29)
        } else if name == self.30.name() {
            Some(&mut self.30)
        } else if name == self.31.name() {
            Some(&mut self.31)
        } else {
            None
        }
    }
}
